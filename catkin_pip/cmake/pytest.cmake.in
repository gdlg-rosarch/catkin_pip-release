_generate_function_if_testing_is_disabled("catkin_add_pytests")

#
# Add Python pytest tests.
#
# Nose collects tests from the directory ``dir`` automatically.
#
# .. note:: The test can be executed by calling ``py.test``
#   directly or using:
#   `` make run_tests_${PROJECT_NAME}_pytests_${dir}``
#   (where slashes in the ``dir`` are replaced with periods)
#
# :param path: a relative or absolute directory to search for
#   pytests in or a relative or absolute file containing tests
# :type path: string
# :param DEPENDENCIES: the targets which must be built before executing
#   the test
# :type DEPENDENCIES: list of strings
# :param TIMEOUT: the timeout for individual tests in seconds
#   (default: 60)
# :type TIMEOUT: integer
# :param WORKING_DIRECTORY: the working directory when executing the
#   tests (this option can only be used when the ``path`` argument is a
#   file  but not when it is a directory)
# :type WORKING_DIRECTORY: string
# :param PYTEST_OPT: additional options to be used to run pytest, this param
#   should be used only if the other ones do not fullfill you requirements to
#   properly run your pytests.
# :type PYTEST_OPT: string
#
# @public
#
function(catkin_add_pytests path)
  _warn_if_skip_testing("catkin_add_pytests")

  if(NOT CATKIN_PIP_PYTEST)
    message(WARNING "skipping pytests(${path}) in project '${PROJECT_NAME}'")
    return()
  endif()

  cmake_parse_arguments(_pytest "" "TIMEOUT;WORKING_DIRECTORY;PYTEST_OPT" "DEPENDENCIES" ${ARGN})
  if(NOT _pytest_TIMEOUT)
    set(_pytest_TIMEOUT 60)
  endif()
  if(NOT _pytest_TIMEOUT GREATER 0)
    message(FATAL_ERROR "py.test() TIMEOUT argument must be a valid number of seconds greater than zero")
  endif()

  # check that the directory exists
  set(_path_name _path_name-NOTFOUND)
  if(IS_ABSOLUTE ${path})
    set(_path_name ${path})
  else()
    find_file(_path_name ${path}
      PATHS ${CMAKE_CURRENT_SOURCE_DIR}
      NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
    if(NOT _path_name)
      message(FATAL_ERROR "Can't find pytests path '${path}'")
    endif()
  endif()

  # check if coverage reports are being requested
  if("$ENV{CATKIN_TEST_COVERAGE}" STREQUAL "1")
    set(_covarg "--cov-report xml --cov-report annotate --cov=${PROJECT_SOURCE_DIR}")
  endif()

  # strip PROJECT_SOURCE_DIR and PROJECT_BINARY_DIR prefix from output_file_name
  set(output_file_name ${path})
  _strip_path_prefix(output_file_name "${output_file_name}" "${PROJECT_SOURCE_DIR}")
  _strip_path_prefix(output_file_name "${output_file_name}" "${PROJECT_BINARY_DIR}")
  if("${output_file_name}" STREQUAL "")
    set(output_file_name ".")
  endif()
  string(REPLACE "/" "." output_file_name ${output_file_name})
  string(REPLACE ":" "." output_file_name ${output_file_name})

  set(output_path ${CATKIN_TEST_RESULTS_DIR}/${PROJECT_NAME})
  get_filename_component(output_path "${output_path}" ABSOLUTE)
  set(cmd "${CMAKE_COMMAND} -E make_directory ${output_path}")
  set(tests "${_path_name}")
  set(cmd ${cmd} "${CATKIN_ENV} ${CATKIN_PIP_PYTEST} --timeout=${_pytest_TIMEOUT} ${tests} ${_pytest_PYTEST_OPT} --junit-xml ${output_path}/pytests-${output_file_name}.xml ${_covarg}")
  catkin_run_tests_target("pytests" ${output_file_name} "pytests-${output_file_name}.xml" COMMAND ${cmd} DEPENDENCIES ${_pytest_DEPENDENCIES} WORKING_DIRECTORY ${_pytest_WORKING_DIRECTORY})
endfunction()

# Providing another catkin pytests usage...
# now we can finally use the simple "py.test" entry_point (forcing cmake to find it)
find_program(CATKIN_PIP_PYTEST NAMES
  "py.test${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}"
  "py.test-${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}"
  "py.test${PYTHON_VERSION_MAJOR}"
  "py.test-${PYTHON_VERSION_MAJOR}"
  "py.test"
  PATHS
  ${CATKIN_PIP_ENV}/@CATKIN_GLOBAL_BIN_DESTINATION@
  NO_DEFAULT_PATH
)
if(CATKIN_PIP_PYTEST)
  message(STATUS "Catkin_pip using Python py.test: ${CATKIN_PIP_PYTEST}")
else()
  message(FATAL_ERROR "Catkin_pip py.test command not found in ${CATKIN_DEVEL_PREFIX}/@CATKIN_GLOBAL_BIN_DESTINATION@. Make sure you have installed the pytest pip package on your ${CATKIN_DEVEL_PREFIX} workspace.")
endif()
