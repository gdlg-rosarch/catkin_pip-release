if ( CMAKE_BACKWARDS_COMPATIBILITY LESS 2.8 )
	message ( FATAL_ERROR " CMAKE MINIMUM BACKWARD COMPATIBILITY REQUIRED : 2.8 !" )
endif( CMAKE_BACKWARDS_COMPATIBILITY LESS 2.8 )

# Enforcing one time include https://cmake.org/Wiki/CMake_Performance_Tips#Use_an_include_guard
if(catkin_pip_prefix_included)
  return()
endif(catkin_pip_prefix_included)
set(catkin_pip_prefix_included true)

message(STATUS "Loading catkin-pip-prefix.cmake from ${CMAKE_CURRENT_LIST_DIR}... ")


#
# Important : This script is included by multiple cmake scripts at configure and build time
# So it needs to be idempotent (no change if called multiple time with same settings/environment)
#


# protecting against missing cmake file
include ( "${CMAKE_CURRENT_LIST_DIR}/catkin-pip-runcmd.cmake" RESULT_VARIABLE CATKIN_PIP_RUNCMD_FOUND )
IF ( NOT CATKIN_PIP_RUNCMD_FOUND )
    message ( FATAL_ERROR "{CMAKE_CURRENT_LIST_DIR}/catkin-pip-runcmd.cmake Not Found !!!" )
ENDIF ( NOT CATKIN_PIP_RUNCMD_FOUND )

if ( NOT CATKIN_PIP_REQUIREMENTS_PATH )
    # Our current path is where all catkin-pip requirements should be
    set (CATKIN_PIP_REQUIREMENTS_PATH ${CMAKE_CURRENT_LIST_DIR} CACHE PATH "where all catkin-pip requirements should be")
endif()

function(find_catkin_system_pip)
  # we need to make sure we don't find any other catkin-pip from somewhere else if our path is not clean (careful with underlays or install/devel)
  find_program(CATKIN_SYS_PIP NAMES pip pip2 pip2.7 NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH NO_SYSTEM_ENVIRONMENT_PATH)

  if(CATKIN_SYS_PIP)
    set(PIP_VERSION_COMMAND ${CATKIN_SYS_PIP} --version)

    string(REPLACE ";" " " PIP_VERSION_CMDSTR "${PIP_VERSION_COMMAND}")
    #message(STATUS "    ... Running ${PIP_VERSION_CMDSTR} ...")

    execute_process(
      COMMAND ${PIP_VERSION_COMMAND}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      RESULT_VARIABLE PIP_VERSION_RESULT
      OUTPUT_VARIABLE PIP_VERSION_VARIABLE
      ERROR_VARIABLE PIP_VERSION_ERROR
    )

    #message(STATUS "    ... Done ... [${PIP_VERSION_RESULT}]: ${PIP_VERSION_VARIABLE}")
    if (PIP_VERSION_RESULT)
        message(STATUS "System Introspection Command ${PIP_VERSION_CMDSTR} FAILED !")
        message(FATAL_ERROR "${PIP_VERSION_ERROR}")
    else()
        # we need to parse the result to extract the version
        string(REPLACE " " ";" PIP_VERSION_VARIABLE_LIST ${PIP_VERSION_VARIABLE})
        list(GET PIP_VERSION_VARIABLE_LIST 1 CATKIN_SYS_PIP_VERSION)
        set (CATKIN_SYS_PIP_VERSION ${CATKIN_SYS_PIP_VERSION} CACHE INTERNAL "Major version of pip detected on the system")

        message(STATUS "    System pip version detected : ${CATKIN_SYS_PIP_VERSION}")

    endif()

    # Detecting debian pip "--system" extension
    # ros@ros-Kinetic-VM:~/Project$ pip install --help | grep -e "--system"
    #  --system                    Install using the system scheme (overrides --user on Debian systems)
    # ros@ros-Kinetic-VM:~/Project$ pip install --help | grep -e "--system" | wc -l
    # 1

    set(PIP_INSTALL_HELP_COMMAND ${CATKIN_SYS_PIP} install --help)

    string(REPLACE ";" " " PIP_INSTALL_HELP_CMDSTR "${PIP_VERSION_COMMAND}")
    #message(STATUS "    ... Running ${PIP_INSTALL_HELP_CMDSTR} ...")

    execute_process(
      COMMAND ${PIP_INSTALL_HELP_COMMAND}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      RESULT_VARIABLE PIP_INSTALL_HELP_RESULT
      OUTPUT_VARIABLE PIP_INSTALL_HELP_VARIABLE
      ERROR_VARIABLE PIP_INSTALL_HELP_ERROR
    )

    #message(STATUS "    ... Done ... [${PIP_INSTALL_HELP_RESULT}]: ${PIP_INSTALL_HELP_VARIABLE}")
    if (PIP_INSTALL_HELP_RESULT)
        message(STATUS "System Introspection Command ${PIP_INSTALL_HELP_CMDSTR} FAILED !")
        message(FATAL_ERROR "${PIP_INSTALL_HELP_ERROR}")
    else()
        message(STATUS "    System pip install detected options : ")
        string(REPLACE "\n" ";" PIP_INSTALL_HELP_VARIABLE_LIST ${PIP_INSTALL_HELP_VARIABLE})

        # CMake list search
        foreach(line IN LISTS PIP_INSTALL_HELP_VARIABLE_LIST)
            # message("LINE : ${line}")
            # parsing line by line to extract available options
            string(REPLACE " " ";" line_list ";${line};")

            list (FIND line_list "--user" _index)
            if (${_index} GREATER -1)
                message(STATUS "      --user")
                set(CATKIN_SYS_PIP_HAS_USER TRUE CACHE INTERNAL "Whether detected system pip can do 'pip install --user'" )
            endif()

            list (FIND line_list "--system" _index)
            if (${_index} GREATER -1)
                message(STATUS "      --system")
                set(CATKIN_SYS_PIP_HAS_SYSTEM TRUE CACHE INTERNAL "Whether detected system pip can do 'pip install --system'" )
            endif()

        endforeach()

    endif()

  else(CATKIN_SYS_PIP)
    message( FATAL_ERROR "pip system command not found. Make sure you have installed the python-pip package on your system.")
  endif()

endfunction(find_catkin_system_pip)


function(catkin_pip_setup_prefix ws_prefix)

    # Trying to find our own pip
    # Careful this creates a CACHE variable that we need to recreate here in case people clean devel without cleaning build
    unset(CATKIN_PIP CACHE)
    find_program(CATKIN_PIP NAMES pip pip2 pip2.7 PATHS ${ws_prefix}/@CATKIN_GLOBAL_BIN_DESTINATION@ NO_DEFAULT_PATH)

    if (CATKIN_PIP)
        set(CATKIN_PIP "${CATKIN_PIP} -q")  # we can add all default basic options here.
    else ()
        # If not found, it means we need to do the whole setup...
        unset(CATKIN_PIP CACHE)
        # TODO:  cleanup if unnecessary message (the find_program already outputs something
        message(STATUS "    ... Catkin pip was not found in ${ws_prefix}/@CATKIN_GLOBAL_BIN_DESTINATION@ ...")

        # Assuming Ubuntu Trusty here. platform detection is another hurdle
        set(CMAKE_SYSTEM_PREFIX_PATH / /usr /usr/local)

        find_catkin_system_pip()

        message(STATUS "    ... Retrieving catkin_pip requirements using system pip ...")

        if(${CATKIN_SYS_PIP_HAS_SYSTEM})
            # if --system is present, it means the default behavior has been changed to --user (by debian/ubuntu)
            # and we have to specify --system in order to use --target
            set(OPT_SYSTEM "--system")
        else(${CATKIN_SYS_PIP_HAS_SYSTEM})
            set(OPT_SYSTEM "")
        endif(${CATKIN_SYS_PIP_HAS_SYSTEM})

        if (${CATKIN_SYS_PIP_VERSION} VERSION_LESS 6.0.0)
            # We need to find a pip command that works for old pip versions (indigo supports trusty which is pip v1.5.4)
            # Note --target here means we cannot check if a package is already installed or not before installing, using old pip.
            # which means we have to reinstall dependencies everytime and specify --exists-action w to avoid "already exists" errors
            # Avoid --install-option since the setuptools version found will be different the first time and the following times
            execute_process(
              COMMAND ${CATKIN_ENV} ${CATKIN_SYS_PIP} install ${OPT_SYSTEM} -r "${CATKIN_PIP_REQUIREMENTS_PATH}/catkin-pip-base.req" --download-cache "${CMAKE_BINARY_DIR}/pip-cache" --target "${ws_prefix}/@CATKIN_PIP_GLOBAL_PYTHON_DESTINATION@" --exists-action w
              WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
              RESULT_VARIABLE PIP_RESULT
              OUTPUT_VARIABLE PIP_VARIABLE
              ERROR_VARIABLE PIP_ERROR
            )
            message(STATUS "    ... Done ... [${PIP_RESULT}]: ${PIP_VARIABLE}")
            if (PIP_RESULT)
                message(STATUS "Command ${CATKIN_SYS_PIP} install ${OPT_SYSTEM} -r \"${CATKIN_PIP_REQUIREMENTS_PATH}/catkin-pip-base.req\" --download-cache \"${CMAKE_BINARY_DIR}/pip-cache\" --target \"${ws_prefix}/@CATKIN_PIP_GLOBAL_PYTHON_DESTINATION@\" --exists-action w FAILED")
                message(FATAL_ERROR "${PIP_ERROR}")
            endif()
        else ()  # assuming latest pip
            # We need to find a pip command that works for pip versions (kinetic supports xenial which is pip v8.1.1)
            # Careful --system is a debian porting extension. This will not work if the system pip command loads the pip package of pip itself, after the environment has been setup...
            execute_process(
              COMMAND ${CATKIN_ENV} ${CATKIN_SYS_PIP} install ${OPT_SYSTEM} -r "${CATKIN_PIP_REQUIREMENTS_PATH}/catkin-pip-base.req" --cache-dir "${CMAKE_BINARY_DIR}/pip-cache" --target "${ws_prefix}/@CATKIN_PIP_GLOBAL_PYTHON_DESTINATION@" --exists-action w
              WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
              RESULT_VARIABLE PIP_RESULT
              OUTPUT_VARIABLE PIP_VARIABLE
              ERROR_VARIABLE PIP_ERROR
            )
            message(STATUS "    ... Done ... [${PIP_RESULT}]: ${PIP_VARIABLE}")
            if (PIP_RESULT)
                message(STATUS "Command ${CATKIN_SYS_PIP} install ${OPT_SYSTEM} -r \"${CATKIN_PIP_REQUIREMENTS_PATH}/catkin-pip-base.req\" --cache-dir \"${CMAKE_BINARY_DIR}/pip-cache\" --target \"${ws_prefix}/@CATKIN_PIP_GLOBAL_PYTHON_DESTINATION@\" --exists-action w FAILED")
                message(FATAL_ERROR "${PIP_ERROR}")
            endif()
        endif()


        set(CATKIN_PIP ${PYTHON_EXECUTABLE} -m pip)  # to make sure we use our recently downloaded pip version (its entrypoints were not installed by old pip/setuptools)

        unset(CATKIN_SYS_PIP CACHE)  # we dont need this any longer
        # We are now using the latest pip from pip package, and not the system one.

        # Fixing security since python 2.7.6 on trusty is broken : https://stackoverflow.com/questions/29099404/ssl-insecureplatform-error-when-using-requests-package
        # Also reinstalling pip to finally get it in bin/

        # To debug the python environment at this stage
        #catkin_pip_runcmd(${PYTHON_EXECUTABLE} -m site)

        catkin_pip_runcmd(${CATKIN_PIP} install --ignore-installed -r "${CATKIN_PIP_REQUIREMENTS_PATH}/catkin-pip-fixups.req" --src ${CMAKE_SOURCE_DIR} --exists-action b --prefix "${ws_prefix}")

        unset(CATKIN_PIP)
        # now we can finally use the simple "pip" entry_point (forcing cmake to find it)
        find_program( CATKIN_PIP NAMES pip pip2 pip2.7 PATHS ${ws_prefix}/@CATKIN_GLOBAL_BIN_DESTINATION@ NO_DEFAULT_PATH)
        if (CATKIN_PIP)
            message( STATUS "Found catkin_pip pip command at ${CATKIN_PIP}.")
        else()
            message( FATAL_ERROR "catkin_pip pip command not found in ${ws_prefix}/@CATKIN_GLOBAL_BIN_DESTINATION@. Make sure you have installed the pip pip package on ${ws_prefix} workspace.")
        endif()

    endif()
endfunction()
