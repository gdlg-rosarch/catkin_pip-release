if ( CMAKE_BACKWARDS_COMPATIBILITY LESS 2.8 )
	message ( FATAL_ERROR " CMAKE MINIMUM BACKWARD COMPATIBILITY REQUIRED : 2.8 !" )
endif( CMAKE_BACKWARDS_COMPATIBILITY LESS 2.8 )

# Enforcing one time include https://cmake.org/Wiki/CMake_Performance_Tips#Use_an_include_guard
if(catkin_pip_runcmd_included)
  return()
endif(catkin_pip_runcmd_included)
set(catkin_pip_runcmd_included true)

message(STATUS "Loading catkin-pip-runcmd.cmake from ${CMAKE_CURRENT_LIST_DIR}... ")

#
# Important : This script is included by multiple cmake scripts at configure and build time
# So it needs to be idempotent (no change if called multiple time with same settings/environment)
#


function(catkin_pip_runcmd)

    set(CATKIN_PIP_COMMAND ${ARGN})

    # TODO : refactor to use separate arguments, like catkin_pip_install_devel_target
    string(REPLACE ";" " " CATKIN_PIP_CMDSTR "${CATKIN_ENV} ${CATKIN_PIP_COMMAND}")
    message(STATUS "    ... Running ${CATKIN_PIP_CMDSTR} ...")

    execute_process(
      # Note we need to use catkin_env to make sure our envhook is properly loaded
      COMMAND ${CATKIN_ENV} ${CATKIN_PIP_COMMAND}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      RESULT_VARIABLE PIP_RESULT
      OUTPUT_VARIABLE PIP_VARIABLE
      ERROR_VARIABLE PIP_ERROR
    )

    message(STATUS "    ... Done ... [${PIP_RESULT}]: ${PIP_VARIABLE}")
    if (PIP_RESULT)
        message(STATUS "Command ${CATKIN_PIP_CMDSTR} FAILED !")
        message(FATAL_ERROR "${PIP_ERROR}")
    endif()

endfunction()


function(catkin_pip_install_devel_target package_name package_path)
    set(CATKIN_PIP_INSTALL_DEVEL_OUTPUTS
        # ${CATKIN_DEVEL_PREFIX}/${CATKIN_PIP_PYTHON_INSTALL_DIR}/easy-install.pth
        # CAREFUL with multiple outputs : https://cmake.org/Bug/view.php?id=15116
        ${CATKIN_DEVEL_PREFIX}/${CATKIN_PIP_PYTHON_INSTALL_DIR}/${package_name}.egg-link
    )

    string(REPLACE ";" " " ARGN_STR "${ARGN}")

    # note setlock/flock because of https://github.com/pypa/pip/issues/2361
    # TODO : change to use --target to allow installing duplicate packages with pip>=9.0.0 ... Ref https://github.com/pypa/pip/issues/4243


    set(CATKIN_PIP_CMD ${CATKIN_ENV})
    set(CATKIN_PIP_CMD_ARGS_STR "flock ${CATKIN_PIP_ENV}/catkin_pip.lock ${CATKIN_PIP} install -e ${package_path} --prefix ${CATKIN_DEVEL_PREFIX} ${ARGN_STR}")
    # IF WE ARE PASSING EDITABLE PKG PATHS INTO PYTHONPATH we need to work around bug :
    # PYTHONPATH breaks pip install --editable Ref : https://github.com/pypa/pip/issues/4261
    # set(CATKIN_PIP_CMD_ARGS_STR "-c 'export PYTHONPATH=${CATKIN_DEVEL_PREFIX}/${CATKIN_PIP_PYTHON_INSTALL_DIR}:${CATKIN_PIP_ENV}/${CATKIN_PIP_PYTHON_INSTALL_DIR}\; ${CATKIN_PIP_CMD_ARGS_STR}'")
    # set(CATKIN_PIP_CMD /bin/bash)  # Ubuntu (Linux?) only  # Also we are probably missing some other CATKIN_ENV setup...


    separate_arguments(CATKIN_PIP_CMD_ARGS_LIST UNIX_COMMAND ${CATKIN_PIP_CMD_ARGS_STR})


    # Note that catkin_env is called first. That is because we do not trust catkin_env return code and async behavior.
    # However we have to assume it doesn't alter the environment in a way that breaks setlock/flock.
    # Hint : on ubuntu trusty, I noticed the lock file stay there after execution, however the mutex behavior works fine.

    add_custom_command(
      OUTPUT ${CATKIN_PIP_INSTALL_DEVEL_OUTPUTS}

      # Note we are using setlock/flock to avoid concurrent pip calls (if make runs target in parallel)
      # Note we override PYTHONPATH to workaround a pip bug
      # Note we need to use catkin_env to make sure our envhook is properly loaded

      COMMAND ${CATKIN_PIP_CMD} ${CATKIN_PIP_CMD_ARGS_LIST}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
      DEPENDS "${package_path}"  # file level dependency : package needs to be in the path
      COMMENT "${CATKIN_PIP_CMD} ${CATKIN_PIP_CMD_ARGS_STR}"
      VERBATIM
    )

    add_custom_target(${package_name} ALL DEPENDS ${CATKIN_PIP_INSTALL_DEVEL_OUTPUTS})  # file level dependency : we need the output of the custom command

endfunction()
